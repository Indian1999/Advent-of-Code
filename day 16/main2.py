from math import inf
from functools import cache
import matplotlib.pyplot as plt
import numpy as np

#global variables
maze = []
stack = []
cost_matrix = None
start_pos = None
finish_pos = None

def read_maze(from_file, maze_num = 1):
    global maze
    if not from_file:
        if maze_num == 1:
            maze = [
                ["#","#","#","#","#","#","#","#","#","#","#","#","#","#","#"],
                ["#",".",".",".",".",".",".",".","#",".",".",".",".","E","#"],
                ["#",".","#",".","#","#","#",".","#",".","#","#","#",".","#"],
                ["#",".",".",".",".",".","#",".","#",".",".",".","#",".","#"],
                ["#",".","#","#","#",".","#","#","#","#","#",".","#",".","#"],
                ["#",".","#",".","#",".",".",".",".",".",".",".","#",".","#"],
                ["#",".","#",".","#","#","#","#","#",".","#","#","#",".","#"],
                ["#",".",".",".",".",".",".",".",".",".",".",".","#",".","#"],
                ["#","#","#",".","#",".","#","#","#","#","#",".","#",".","#"],
                ["#",".",".",".","#",".",".",".",".",".","#",".","#",".","#"],
                ["#",".","#",".","#",".","#","#","#",".","#",".","#",".","#"],
                ["#",".",".",".",".",".","#",".",".",".","#",".","#",".","#"],
                ["#",".","#","#","#",".","#",".","#",".","#",".","#",".","#"],
                ["#","S",".",".","#",".",".",".",".",".","#",".",".",".","#"],
                ["#","#","#","#","#","#","#","#","#","#","#","#","#","#","#"]
            ]
        elif maze_num == 2:
            maze = [
                ["#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#"],
                ["#",".",".",".","#",".",".",".","#",".",".",".","#",".",".","E","#"],
                ["#",".","#",".","#",".","#",".","#",".","#",".","#",".","#",".","#"],
                ["#",".","#",".","#",".","#",".",".",".","#",".",".",".","#",".","#"],
                ["#",".","#",".","#",".","#",".","#","#","#",".","#",".","#",".","#"],
                ["#",".",".",".","#",".","#",".","#",".",".",".",".",".","#",".","#"],
                ["#",".","#",".","#",".","#",".","#",".","#","#","#","#","#",".","#"],
                ["#",".","#",".",".",".","#",".","#",".","#",".",".",".",".",".","#"],
                ["#",".","#",".","#","#","#","#","#",".","#",".","#","#","#",".","#"],
                ["#",".","#",".","#",".",".",".",".",".",".",".","#",".",".",".","#"],
                ["#",".","#",".","#","#","#",".","#","#","#","#","#",".","#","#","#"],
                ["#",".","#",".","#",".",".",".","#",".",".",".",".",".","#",".","#"],
                ["#",".","#",".","#",".","#","#","#","#","#",".","#","#","#",".","#"],
                ["#",".","#",".","#",".",".",".",".",".",".",".",".",".","#",".","#"],
                ["#",".","#",".","#",".","#","#","#","#","#","#","#","#","#",".","#"],
                ["#","S","#",".",".",".",".",".",".",".",".",".",".",".",".",".","#"],
                ["#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#"]
            ]
        elif maze_num == 3:
            maze = [
                ["#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#"],
                ["#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#",".",".","E","#"],
                ["#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#",".",".","#",".","#"],
                ["#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#",".",".","#","#",".","#"],
                ["#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#",".",".","#","#","#",".","#"],
                ["#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#",".",".","#","#",".",".",".","#"],
                ["#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#",".",".","#","#","#",".","#","#","#"],
                ["#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#",".",".","#","#","#","#",".",".",".","#"],
                ["#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#",".",".","#","#","#","#","#","#","#",".","#"],
                ["#","#","#","#","#","#","#","#","#","#","#","#","#","#","#",".",".","#","#",".",".",".",".",".",".",".","#"],
                ["#","#","#","#","#","#","#","#","#","#","#","#","#","#",".",".","#","#","#",".","#","#","#","#","#","#","#"],
                ["#","#","#","#","#","#","#","#","#","#","#","#","#",".",".","#","#","#","#",".",".",".",".",".",".",".","#"],
                ["#","#","#","#","#","#","#","#","#","#","#","#",".",".","#","#","#","#","#","#","#","#","#","#","#",".","#"],
                ["#","#","#","#","#","#","#","#","#","#","#",".",".","#","#",".",".",".",".",".",".",".",".",".",".",".","#"],
                ["#","#","#","#","#","#","#","#","#","#",".",".","#","#","#",".","#","#","#","#","#","#","#","#","#","#","#"],
                ["#","#","#","#","#","#","#","#","#",".",".","#","#","#","#",".",".",".",".",".",".",".",".",".",".",".","#"],
                ["#","#","#","#","#","#","#","#",".",".","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#",".","#"],
                ["#","#","#","#","#","#","#",".",".","#","#",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","#"],
                ["#","#","#","#","#","#",".",".","#","#","#",".","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#"],
                ["#","#","#","#","#",".",".","#","#","#","#",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","#"],
                ["#","#","#","#",".",".","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#",".","#"],
                ["#","#","#",".",".","#","#",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","#"],
                ["#","#",".",".","#","#","#",".","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#"],
                ["#",".",".","#","#","#","#",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","#"],
                ["#",".","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#",".","#"],
                ["#","S",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","#"],
                ["#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#"]
            ]
    else:
        with open("day 16/input.txt", "r", encoding="utf-8") as f:
            for line in f:
                row = []
                for char in line.strip():
                    row.append(char)
                maze.append(row)

def get_finish_pos():
    global maze
    for i in range(len(maze)):
        for j in range(len(maze[i])):
            if maze[i][j] == "E":
                return (i,j)
    raise Exception("Finish point not found ERROR")

def get_start_pos():
    global maze
    for i in range(len(maze)):
        for j in range(len(maze[i])):
            if maze[i][j] == "S":
                return (i,j)
    raise Exception("Start point not found ERROR")

def print_cost_matrix():
    for row in cost_matrix:
        for item in row:
            if item == inf:
                print("#####",end=" ")
            else:
                if item < 10:
                    print(f"    {item}", end=" ")
                elif item < 100:
                    print(f"   {item}", end=" ")
                elif item < 1000:
                    print(f"  {item}", end=" ")
                elif item < 10000:
                    print(f" {item}", end=" ")
                else:
                    print(item,end=" ")
        print()
    print()

@cache
def is_corner(pos1, pos2, pos3):
    if (pos1[0] == pos2[0] and pos2[0] == pos3[0]):
        return False
    if (pos1[1] == pos2[1] and pos2[1] == pos3[1]):
        return False
    return True

def find_path():
    stack.extend([(start_pos[0],start_pos[1] - 1), start_pos])
    cost_matrix[start_pos[0]][start_pos[1]] = 0
    while len(stack) > 1:
        current_pos = stack[-1]
        prev_pos = stack[-2]
        cx, cy = current_pos
        if (maze[cx][cy + 1] == "." or maze[cx][cy + 1] == "E") and cost_matrix[cx][cy + 1] > cost_matrix[cx][cy] + 1 + 1000 * is_corner(prev_pos, current_pos, (cx, cy + 1)):
            stack.append((cx, cy + 1))
            cost_matrix[cx][cy + 1] = cost_matrix[cx][cy] + 1 + 1000 * is_corner(prev_pos, current_pos, (cx, cy + 1))
        elif (maze[cx][cy - 1] == "." or maze[cx][cy - 1] == "E") and cost_matrix[cx][cy - 1] > cost_matrix[cx][cy] + 1 + 1000 * is_corner(prev_pos, current_pos, (cx, cy - 1)):
            stack.append((cx, cy - 1))
            cost_matrix[cx][cy - 1] = cost_matrix[cx][cy] + 1 + 1000 * is_corner(prev_pos, current_pos, (cx, cy - 1))
        elif (maze[cx + 1][cy] == "." or maze[cx + 1][cy] == "E") and cost_matrix[cx + 1][cy] > cost_matrix[cx][cy] + 1 + 1000 * is_corner(prev_pos, current_pos, (cx + 1, cy)):
            stack.append((cx + 1, cy))
            cost_matrix[cx + 1][cy] = cost_matrix[cx][cy] + 1 + 1000 * is_corner(prev_pos, current_pos, (cx + 1, cy))
        elif (maze[cx - 1][cy] == "." or maze[cx - 1][cy] == "E") and cost_matrix[cx - 1][cy] > cost_matrix[cx][cy] + 1 + 1000 * is_corner(prev_pos, current_pos, (cx - 1, cy)):
            stack.append((cx - 1, cy))
            cost_matrix[cx - 1][cy] = cost_matrix[cx][cy] + 1 + 1000 * is_corner(prev_pos, current_pos, (cx - 1, cy))
        else:
            stack.pop()

read_maze(False, 1)
cost_matrix = [[inf for j in range(len(maze[0]))] for i in range(len(maze))]
start_pos = get_start_pos()
finish_pos = get_finish_pos()
find_path()
print_cost_matrix()
print(cost_matrix[finish_pos[0]][finish_pos[1]])

#part 1: 130536 CORRECT



#0 ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### 
#1 #####  5016  6017  6018  6019  6020  6021  6022 #####  8040  8039  8038  8037  7036 #####
#2 #####  5015 #####  7017 ##### ##### #####  7023 #####  9023 ##### ##### #####  7035 #####
#3 #####  5014  6015  6016  6017  6018 #####  7024 #####  8022  8021  7020 #####  7034 #####
#4 #####  5013 ##### ##### #####  7019 ##### ##### ##### ##### #####  7019 #####  7033 #####
#5 #####  5012 #####  3010 #####  6020  6019  6018  6017  5016  6017  6018 #####  7032 #####
#6 #####  5011 #####  3009 ##### ##### ##### ##### #####  5015 ##### ##### #####  7031 #####
#7 #####  4010  4009  3008  4009  3010  4011  4012  4013  4014  4015  4016 #####  7030 #####
#8 ##### ##### #####  3007 #####  3009 ##### ##### ##### ##### #####  5017 #####  7029 #####
#9 #####  1004  2005  2006 #####  3008  4009  4010  4011  4012 #####  5018 #####  7028 #####
#10#####  1003 #####  3005 #####  3007 ##### ##### #####  5013 #####  5019 #####  7027 #####
#11#####  1002  2003  2004  2005  2006 #####  5012  6013  5014 #####  5020 #####  7026 #####
#12#####  1001 ##### ##### #####  3007 #####  5011 #####  5013 #####  5021 #####  7025 #####
#13#####     0     1     2 #####  3008  4009  4010  4011  4012 #####  5022  6023  6024 #####
#14##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### #####
#   0     1     2     3     4     5     6     7     8     9     10    11    12    13    14    
        



